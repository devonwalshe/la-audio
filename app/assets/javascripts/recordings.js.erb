// Recordings JS
ready = function() {
  
  // Initialize audio player
  // audiojs.events.ready(function() {
  //   var as = audiojs.createAll();
  // });
  var interview = document.getElementById("audioPlayer");
  
  // Wait till everything is loaded to fire certain functions
  interview.addEventListener('loadedmetadata', function() {
    
    // Set up the global variables
    var segments = JSON.parse(gon.interview_segments);
    var interview = document.getElementById("audioPlayer");
    var interviewLength = gon.interview_length;
    var startTime = document.getElementsByClassName('local-data')[0].getAttribute("data-start-time")
		
		// Sets the start time
		interview.currentTime = parseFloat(startTime)
		
    // Scrubbing = sets the interview to play
    $('#audioPlayer').bind('canplay', function() {
      $('.player-scrubber-container').on('click', function(e){
        
        // Set the click location
        var x = e.pageX - $('.player-scrubber-container').offset().left;
      
        // Get the bar width
        var scrubberBarWidth = $('.player-scrubber-container').width();
        
        // Get the scale attr
        var scaleAttr = parseFloat(interview.duration)/parseFloat(scrubberBarWidth);
  
        // move it to the appropriate pixel location
        interview.currentTime = x * scaleAttr
    
      });
    });
    
    // Segment bar scrubbing
    $('#audioPlayer').bind('canplay', function() {
      $('.middle-bar').on('click', function(e){
        
        // Set the click location
        var x = e.pageX - $('.middle-bar').offset().left;
      
        // Get the bar width
        var middleBarWidth = $('.middle-bar').width();
        
        // Get the scale attr
        var scaleAttr = parseFloat(interview.duration)/parseFloat(middleBarWidth);
  
        // move it to the appropriate pixel location
        interview.currentTime = x * scaleAttr
    
      });
    });
    
    // Inserts total time on page load
    function insertTotalTime(){

      var minutes = Math.floor(interview.duration / 60);
      var seconds = Math.round(interview.duration % 60);
    

      if(seconds < 10){
        seconds = "0"+seconds
      }
    
      $(".player-total").text(minutes + ":" + seconds)
    };
    
    // On time update, check which segment we're in and light up the bubble
    interview.ontimeupdate = function() {
      updateSegmentBubble();
      drawTimelinePointer();
      updateScrubber();
      updateElapsed();
      console.log(parseFloat(getTimeCode()))
    };

    window.onresize = function(){
      drawSegmentLines();
    };

    // If window size changes get timeline middle window size
    function getTimelineSize(){
    
      return $(".middle-bar").width()
    };

    // Get timecode from interview audio object
    function getTimeCode() {
    // Display the current position of the video in a <p> element with id="timecode"
      return interview.currentTime;
    }
  
    // Gets the current time, iterates through all the segments, and finds the relevant bubble, then lights it up
    function updateSegmentBubble() {
      currentTime = parseFloat(getTimeCode());
      // console.log(current_time.toFixed(1))
    
      // Iterate through segments to check if we are in a certain one
      var active_segments = [];
			for(i = 0; i < segments.length; i++){
        startTime = parseFloat(segments[i]["start_time"]);
        endTime = parseFloat(segments[i]["end_time"]);
      
				// Turn off non-active segments
        if (currentTime <= startTime || currentTime >= endTime) {
          // console.log(segments[i])
          $("div#"+segments[i]["name"].toLowerCase().replace(/\s/g, "_")).addClass("bgblue").removeClass("bgorange");
        };
				
        // Select active segments
        if (currentTime >= startTime && currentTime <= endTime) {
          // console.log(segments[i])
					active_segments.push($("div#"+segments[i]["name"].toLowerCase().replace(/\s/g, "_")));
        };
      
      };
			
			// Light up active segments
			for(i=0; i< active_segments.length; i++){
				active_segments[i].addClass("bgorange").removeClass("bgblue")
				
			};
    }
  
    // Draws lines where the segments are in the timeline below the audio player
    function drawSegmentLines(){
      
      // Clear all divs
      $(".timeline-background").empty()
    
      // Draw timeline bar
      var timelineBar = document.createElement('div');
      var timelineBar = $(timelineBar).attr({
        "class": "timeline-bar",
      });
    
      $(".timeline-background").append(timelineBar);
    
      // Then to get the size of the div we are in
      var timelineSize = getTimelineSize();
    
      // Get scale attr for timeline size
      var scaleAttr = parseFloat(interviewLength)/parseFloat(timelineSize);
    
      // For each segment
      for(i = 0; i < segments.length; i++){
        // convert its start time to the scale of the div we are in as pixel width
        var pixelLocation = Math.round(parseFloat(segments[i]["start_time"]) / scaleAttr)
      
        // Create the div with the class and location we want
        var segmentTick = document.createElement('div');
        var segmentTick = $(segmentTick).attr({
          "class": "bgorange segment-tick",
          "style": "left:" + pixelLocation + "px;"
        });
      
        // Then draw it
        $(".timeline-background").append(segmentTick);
      } 
    
    }
  
    // Set up timeline pointer
    function drawTimelinePointer(){
    
      // get the time
      var currentTime = parseFloat(getTimeCode());
    
      // Get the middle bar size
      var pointerBarWidth = $(".pointer-mid").width();
    
      // Get the scale attr
      var scaleAttr = parseFloat(interview.duration)/parseFloat(pointerBarWidth);
    
      // move it to the appropriate pixel location
      $(".timeline-pointer").css("left",Math.round(currentTime/scaleAttr)-10)
    
    }
  
    function updateScrubber(){
      // get the time
      var currentTime = parseFloat(getTimeCode());
    
      // Get the middle bar size
      var scrubberBarWidth = $(".player-scrubber-container").width();
    
      // Get the scale attr
      var scaleAttr = parseFloat(interview.duration)/parseFloat(scrubberBarWidth);

      // move it to the appropriate pixel location
      $(".player-scrubber-played").css("width",Math.round(currentTime/scaleAttr))
    
    };
  
    // Update elapsed time
    function updateElapsed() {
      var currentTime = parseFloat(getTimeCode());
      var minutes = Math.floor(currentTime / 60);
      var seconds = Math.round(currentTime % 60);
    
    
      if(seconds < 10){
        seconds = "0"+seconds
      }
      if(minutes < 10){
        minutes = "0"+minutes
      }
      $(".player-elapsed").text(minutes + ":" + seconds)
    };
  
    // Execute functions
    insertTotalTime();
    // Initial draw of segment lines
    drawSegmentLines();
  
  }); // End meta
  
};

// Player functions
function playInterview(){
  var interview = document.getElementById("audioPlayer");
  interview.play();
};

function pauseInterview(){
  var interview = document.getElementById("audioPlayer");
  interview.pause();
};

function stopInterview(){
  var interview = document.getElementById("audioPlayer");
  interview.pause();
  interview.currentTime = 0;
};

function muteInterview(){
  var interview = document.getElementById("audioPlayer");
  interview.mute;
};

function loopInterview(){
  var interview = document.getElementById("audioPlayer");
  interview.loop = true;
};

// Turbolinks workaround
$(document).ready(ready)
$(document).on('page:load', ready)

// ### Scrubber mover

// $('.player-scrubber-container').on( 'click', function( e ) {
//     var x = e.pageX - this.offsetLeft;
//     var y = e.pageY - this.offsetTop;
//     console.log("x = " + x + " y = " + y);
// });â€‹